package exam_dosTest;

import java.io.*;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;

public class myDos {
	private static String path = "C:\\";
	private static Scanner scanner = new Scanner(System.in);

	public static void main(String[] args) {
		while (true) {
			System.out.print(path + "> ");
			String str = scanner.nextLine();
			if ("exit".equals(str)) {
				System.exit(0);
			}
			String[] arg = str.split(" ");
			switch (arg[0]) {
			case "cd":
				cd_cmd(arg);
				break;
			case "dir":
				dir_cmd();
				break;
			case "type":
				type_cmd(arg);
				break;
			case "rename":
				rename_cmd(arg);
				break;
			case "copy":
				copy_cmd(arg);
				break;
			default:
				System.out.println("지원하지 않는 명령어입니다.");
			}
		}
	}

	private static void dir_cmd() {
		File temp = new File(path);
		File[] contents = temp.listFiles();
		if (contents == null) {
			System.out.println("폴더를 읽을 수 없습니다.");
			return;
		}

		int fileCount = 0, dirCount = 0;
		long totalSize = 0;
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd a HH:mm");
		DecimalFormat df = new DecimalFormat("#,###");

		for (File file : contents) {
			System.out.printf("%-25s", sdf.format(new Date(file.lastModified())));
			if (file.isDirectory()) {
				System.out.printf("%-15s%-20s", "<DIR>", file.getName());
				dirCount++;
			} else {
				System.out.printf("%-15s%-20s", df.format(file.length()), file.getName());
				totalSize += file.length();
				fileCount++;
			}
			System.out.println();
		}
		System.out.printf("    %d개 폴더   %d개 파일   총 %s 바이트\n", dirCount, fileCount, df.format(totalSize));
	}

	private static void cd_cmd(String[] arg) {
		if (arg.length != 2) {
			System.out.println("사용법 : cd 이동할 경로");
			return;
		}

		File newPath = new File(path, arg[1]);
		if (!newPath.exists() || !newPath.isDirectory()) {
			System.out.println("해당 폴더가 존재하지 않습니다.");
			return;
		}

		path = newPath.getAbsolutePath();
		System.out.println("현재 경로: " + path);
	}

	private static void type_cmd(String[] arg) {
		if (arg.length != 2) {
			System.out.println("사용법 : type 파일명");
			return;
		}
		File file = new File(path + "\\" + arg[1]);
		if (!file.exists()) {
			System.out.println("파일이 존재하지 않습니다.");
			return;
		}
		try (BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"))) {
			String line;
			while ((line = br.readLine()) != null) {
				System.out.println(line);
			}
		} catch (IOException e) {
			System.out.println("파일을 읽는 중 오류가 발생했습니다.");
		}
	}

	private static void rename_cmd(String[] arg) {
		if (arg.length != 3) {
			System.out.println("사용법 : rename 기존파일명 새로운파일명");
			return;
		}
		File oldFile = new File(path + "\\" + arg[1]);
		File newFile = new File(path + "\\" + arg[2]);

		if (!oldFile.exists()) {
			System.out.println("파일이 존재하지 않습니다.");
		} else if (newFile.exists()) {
			System.out.println("새로운 파일명이 이미 존재합니다.");
		} else if (oldFile.getAbsolutePath().equals(newFile.getAbsolutePath())) {
			System.out.println("같은 파일명으로 변경할 수 없습니다.");
		} else {
			if (oldFile.renameTo(newFile)) {
				System.out.println("파일명이 변경되었습니다.");
			} else {
				System.out.println("파일명 변경에 실패했습니다.");
			}
		}
	}

	private static void copy_cmd(String[] arg) {
		if (arg.length != 3) {
			System.out.println("사용법 : copy 원본 대상");
			return;
		}
		File src = new File(path + "\\" + arg[1]);
		File dest = new File(path + "\\" + arg[2]);

		if (!src.exists()) {
			System.out.println("원본 파일이 존재하지 않습니다.");
			return;
		}
		if (src.isDirectory()) {
			copy_directory(src, dest);
		} else {
			copy_file(src, dest);
		}
	}

	private static void copy_file(File src, File dest) {
		if (dest.exists()) {
			System.out.print("대상 파일이 존재합니다. 덮어쓰시겠습니까? (y/n): ");
			String response = scanner.nextLine();
			if (!response.equalsIgnoreCase("y")) {
				return;
			}
		}
		try (FileInputStream fis = new FileInputStream(src); FileOutputStream fos = new FileOutputStream(dest)) {
			byte[] buffer = new byte[1024];
			int bytesRead;
			while ((bytesRead = fis.read(buffer)) != -1) {
				fos.write(buffer, 0, bytesRead);
			}
			System.out.println("파일이 복사되었습니다.");
		} catch (IOException e) {
			System.out.println("파일 복사 중 오류가 발생했습니다.");
		}
	}

	private static void copy_directory(File src, File dest) {
		if (!src.exists()) {
			System.out.println("원본 폴더가 존재하지 않습니다.");
			return;
		}
		if (!dest.exists()) {
			dest.mkdirs();
		}

		File[] files = src.listFiles();
		if (files == null) {
			System.out.println("폴더를 읽을 수 없습니다.");
			return;
		}

		for (File file : files) {
			File newFile = new File(dest, file.getName());
			if (file.isDirectory()) {
				copy_directory(file, newFile);
			} else {
				copy_file(file, newFile);
			}
		}
		System.out.println("폴더가 복사되었습니다.");
	}
}
